qemu-7.2.0
==========

  SKIP: [-Wimplicit-function-declaration]
  SKIP: [-Wnested-externs]

  TRUE: ../disas/sparc.c:2691:9: warning: dereference of possibly-NULL ‘sorted_opcodes’ [CWE-690] [-Wanalyzer-possible-null-dereference]
  TRUE: ../subprojects/libvhost-user/libvhost-user.c:2550:5: warning: dereference of possibly-NULL ‘elem’ [CWE-690] [-Wanalyzer-possible-null-dereference]

  TRUE: ../hw/xtensa/mx_pic.c:321:5: warning: dereference of possibly-NULL ‘mx’ [CWE-690] [-Wanalyzer-possible-null-dereference]
  TRUE: ../tests/vhost-user-bridge.c:549:5: warning: dereference of possibly-NULL ‘dev’ [CWE-690] [-Wanalyzer-possible-null-dereference]

  TRUE: ../tests/qtest/libqtest.c:631:73: warning: check of ‘*words’ for NULL after already dereferencing it [-Wanalyzer-deref-before-check]
     In qtest_rsp_args, there's this deref:
       if (strcmp(words[0], "IRQ") == 0) {
     before this check:
       g_assert(words[0] != NULL);
     Test coverage added to gcc upstream in r13-5654-g598e10cf415f0a.

  TRUE: ../hw/misc/ivshmem.c:558:9: warning: double ‘close’ of file descriptor ‘fd’ [CWE-1341] [-Wanalyzer-fd-double-close]
    I think this is a true positive, though it might be benign

  False positives already in GCC bugzilla
  =======================================
    GCCBZ: ../qobject/json-parser.c:270:15: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
    GCCBZ: ../qobject/json-parser.c:382:15: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
    GCCBZ: ../qobject/json-parser.c:545:16: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
    GCCBZ: ../qobject/json-parser.c:547:16: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
      https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108524
    GCCBZ: ../hw/tpm/tpm_tis_common.c:311:21: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
    GCCBZ: ../hw/tpm/tpm_tis_common.c:436:9: warning: infinite recursion [CWE-674] [-Wanalyzer-infinite-recursion]
     Am assuming these were false positives; went away with fix for https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108524

    GCCBZ: ../tests/qtest/libqtest.c:696:11: warning: ‘listen’ on non-stream-socket file descriptor ‘sock’ [-Wanalyzer-fd-type-mismatch]
      https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108633

    GCCBZ: ../target/i386/tcg/fpu_helper.c:1136:21: warning: use of uninitialized value ‘accum’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      and a bunch like this in softfloat handling
    GCCBZ: ../target/m68k/softfloat.c:2469:19: warning: use of uninitialized value ‘fp1’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      in function 'floatx80_etoxm1' where it seems to be blithely ignoring the writes to fp1.
    GCCBZ: ../target/m68k/softfloat.c:2215:11: warning: use of uninitialized value ‘fp0’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      seems to have the shortest execution path:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
In function 'floatx80_acos':
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2215:11: warning: use of uninitialized value ‘fp0’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2174:14: (1) region created on stack here
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2174:14: (2) capacity: 16 bytes
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2183:8: (3) following ‘false’ branch...
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2189:5: (4) ...to here
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2191:8: (5) following ‘false’ branch...
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2206:5: (6) ...to here
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../target/m68k/softfloat.c:2215:11: (7) use of uninitialized value ‘fp0’ here
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      Filed as https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108704

    GCCBZ: ../dump/win_dump.c:105:12: warning: use of uninitialized value ‘ptr32’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      In cpu_read_ptr has:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    ret = cpu_memory_rw_debug(cpu, addr, x64 ? (void *)&ptr64 : (void *)&ptr32,
            win_dump_ptr_size(x64), 0);

    *ptr = x64 ? ptr64 : ptr32;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       where presumably cpu_memory_rw_debug inits either ptr64 or ptr32.
       Filed as https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108725

    GCCBZ: /usr/include/glib-2.0/glib/glib-autocleanups.h:28:3: warning: use of uninitialized value ‘*(void **)&val’ [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
       with:
           g_autofree char *val = NULL;
       where for some reason it has:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
In function 'spapr_cap_get_string':
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../hw/ppc/spapr_caps.c:103:22: (1) region created on stack here
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../hw/ppc/spapr_caps.c:106:8: (2) following ‘true’ branch...
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../hw/ppc/spapr_caps.c:107:9: (3) ...to here
/home/david/coding-3/gcc-build/test/control/x86_64-pc-linux-gnu/integration-tests/qemu-7.2.0/qemu-7.2.0/build/../hw/ppc/spapr_caps.c:103:22: (4) inlined call to ‘g_autoptr_cleanup_generic_gfree’ from ‘spapr_cap_get_string’
In function 'g_autoptr_cleanup_generic_gfree':
/usr/include/glib-2.0/glib/glib-autocleanups.h:28:3: (5) use of uninitialized value ‘*(void **)&val’ here
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        and there are a few similar to this
	Filed as https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108733

    GCCBZ: ../hw/intc/omap_intc.c:469:16: warning: dereference of NULL ‘bank’ [CWE-476] [-Wanalyzer-null-dereference]
      Whole bunch of these, where "bank" is conditionally set to non-NULL by code guarded with:
        if ((offset & 0xf80) == 0x80) {
      and then a "switch (offset)" where I think these all happen in offset values where 0x80 is set.
      Filed as https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108806


  False positives not yet in GCC bugzilla
  =======================================

    FALSE: ../target/i386/kvm/kvm.c:5145:37: warning: buffer over-read [CWE-126] [-Wanalyzer-out-of-bounds]
    FALSE: ../target/i386/kvm/kvm.c:5147:28: warning: buffer over-read [CWE-126] [-Wanalyzer-out-of-bounds]
    FALSE: ../target/i386/kvm/kvm.c:5148:37: warning: buffer over-read [CWE-126] [-Wanalyzer-out-of-bounds]
      It's considering accessing hw_breakpoint[n].addr; for some constant n in the loop, when it has 4 elements; presumably it's unrolled it, and doesn't know that there's a limit, and nb_hw_breakpoint is limited in kvm_arch_insert_hw_breakpoint.
      In theory it might be possible to statically prove that 0 <= nb_hw_breakpoint < 4 by analyzing kvm_arch_insert_hw_breakpoint.

    FALSE: ../linux-user/syscall.c:8679:23: warning: jump through null pointer [-Wanalyzer-jump-through-null]
    FALSE: ../linux-user/syscall.c:8693:19: warning: jump through null pointer [-Wanalyzer-jump-through-null]
    FALSE: ../linux-user/syscall.c:1716:16: warning: jump through null pointer [-Wanalyzer-jump-through-null]
      Happens when "fd" is bogus and thus fd_trans_target_to_host_addr returns NULL
      But presumably "safe_read(arg1)" checks fd, and so this execution path can't happen.

    FALSE: ../softmmu/vl.c:2999:40: warning: use of NULL ‘optarg’ where non-null expected [CWE-476] [-Wanalyzer-null-argument]
    FALSE: ../softmmu/vl.c:3006:21: warning: use of NULL ‘optarg’ where non-null expected [CWE-476] [-Wanalyzer-null-argument]
    FALSE: ../softmmu/vl.c:3124:21: warning: use of NULL ‘optarg’ where non-null expected [CWE-476] [-Wanalyzer-null-argument]
    FALSE: ../softmmu/vl.c:3143:21: warning: use of NULL ‘optarg’ where non-null expected [CWE-476] [-Wanalyzer-null-argument]
      A whole bunch of ones like this where "optarg" is NULL in 'qemu_init' due to lookup_opt being able to return NULL - but only when the popt with a name matching the argv string doesn't have HAS_ARG sent.  Presumably all of the ones consuming args have the flag set.
      The array is:
        static const QEMUOption qemu_options[] = {
      so presumably we could *in theory* check that the flag is set.
      Specifically, the popt returned from lookup_opt is const, so its flag was const.
            popt = lookup_opt(argc, argv, &optarg, &optind);
	    [..snip...]
            switch(popt->index) {
	    case value:
	       [...code that assumes (popt->flags & HAS_ARG) in lookup_opt...]

  To be classified
  ================
    TODO: ../target/ppc/misc_helper.c:78:38: warning: shift by count (‘1024’) >= precision of type (‘64’) [-Wanalyzer-shift-count-overflow]
    TODO: ../tests/qtest/libqtest.c:696:11: warning: ‘listen’ on possibly invalid file descriptor ‘sock’ [-Wanalyzer-fd-use-without-check]
    TODO: [-Wanalyzer-deref-before-check]
    TODO: [-Wanalyzer-malloc-leak]
    TODO: [-Wanalyzer-null-argument]
    TODO: [-Wanalyzer-null-dereference]

    TODO: ../libdecnumber/decNumber.c:6530:19: warning: buffer over-read [CWE-126] [-Wanalyzer-out-of-bounds]
      In decUnitAddSub

    TODO: [-Wanalyzer-use-of-uninitialized-value]



