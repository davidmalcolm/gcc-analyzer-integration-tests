coreutils-9.1
=============

  SKIP: [-Wstringop-overflow=]

  False positives already in GCC bugzilla
  =======================================

    GCCBZ: src/cksum.c:224:20: warning: use of uninitialized value '*datap_52' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
    GCCBZ: src/cksum.c:224:38: warning: use of uninitialized value '*datap_77' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      Doesn't seem to be treating fread as populating "buf".
      https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108664

    GCCBZ: src/sum.c:73:21: warning: use of uninitialized value '*buffer_56 + i_41' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
    GCCBZ: src/sum.c:89:19: warning: use of uninitialized value '*buffer_56 + i_42' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
    GCCBZ: src/sum.c:151:12: warning: use of uninitialized value '*buffer_42 + i_30' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
    GCCBZ: src/sum.c:163:10: warning: use of uninitialized value '*buffer_42 + i_31' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      Similar to src/cksum.c:224:20: warning: use of uninitialized value, but might need logic about considering the buffer fully initialized.
    GCCBZ: src/sum.c:99:3: warning: use of uninitialized value '*(unsigned int *)&checksum' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      It's initialized here:
         int checksum = 0;	/* The checksum mod 2^16. */
      so presumably this is a false positive.
      https://gcc.gnu.org/bugzilla/show_bug.cgi?id=108666

  False positives not yet in GCC bugzilla
  =======================================
    FALSE: lib/exclude.c:686:12: warning: leak of FILE 'in' [CWE-775] [-Wanalyzer-file-leak]
    FALSE: lib/randint.c:76:10: warning: leak of 'randint_new(source)' [CWE-401] [-Wanalyzer-malloc-leak]
    FALSE: lib/read-file.c:215:10: warning: leak of FILE 'stream' [CWE-775] [-Wanalyzer-file-leak]
    FALSE: src/uptime.c:170:1: warning: leak of FILE 'fp' [CWE-775] [-Wanalyzer-file-leak]
    FALSE: src/mv.c:213:10: warning: check of 'dir_to_remove' for NULL after already dereferencing it [-Wanalyzer-deref-before-check]

    FALSE: src/digest.c:1508:15: warning: use of uninitialized value 'length' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
      Considers the early return of false from "digest_file" here:
          error (0, errno, "%s", quotef (filename));
          return false;
      but then executes the usage of length in DIGEST_OUT:
          if (! digest_file (file, &binary_file, bin_buffer, &missing, &length))
            ok = false;
          else
            {
              DIGEST_OUT (file, binary_file, bin_buffer, prefix_tag,
                          digest_delim, optind != argc, length);
            }
      as if digest_file returned true.

    FALSE: src/chcon.c:198:7: warning: use of uninitialized value 'context' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
       Within change_file_context:
       "context" created here on stack:
           context_t context IF_LINT (= 0);
       Used here:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
  if (specified_context == NULL)
    {
      context_free (context);
      freecon (file_context);
    }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       and there's a connection between specified_context and context:
         context is presumably initialized when specified_context is NULL here:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
      if (compute_context_from_mask (file_context, &context))
        return 1;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       compute_context_from_mask writes to *second_arg iff it returns 0
       So we should be smarter about knowing this; issue with feasibility checking?
       Or an issue with variables getting clobbered?



  Known false positives that aren't to be fixed at the GCC side
  =============================================================
    FALSE: src/pwd.c:137:3: warning: heap-based buffer underwrite [CWE-124] [-Wanalyzer-out-of-bounds]
      Happens if nth_parent is called with n == 0, which can't happen, but the analyzer can't determine that.

  To be classified
  ================
    TODO: src/csplit.c:388:21: warning: use after 'free_buffer' of 'buf' [CWE-416] [-Wanalyzer-use-after-free]
    TODO: src/du.c:470:10: warning: check of 'ent' for NULL after already dereferencing it [-Wanalyzer-deref-before-check]

    TODO: lib/freopen-safer.c:72:10: warning: leak of file descriptor 'dup2(2, 2)' [CWE-775] [-Wanalyzer-fd-leak]
    TODO: lib/freopen-safer.c:76:10: warning: leak of file descriptor 'dup2(1, 1)' [CWE-775] [-Wanalyzer-fd-leak]
    TODO: lib/freopen-safer.c:80:10: warning: leak of file descriptor 'dup2(0, 0)' [CWE-775] [-Wanalyzer-fd-leak]
      All of the above are in function 'freopen_safer'

    TODO: [-Wanalyzer-fd-leak]
    TODO: [-Wanalyzer-file-leak]
    TODO: [-Wanalyzer-malloc-leak]
    TODO: [-Wanalyzer-mismatching-deallocation]
    TODO: [-Wanalyzer-null-argument]
    TODO: [-Wanalyzer-null-dereference]
    TODO: [-Wanalyzer-use-of-uninitialized-value]

    TODO: src/copy.c:2603:19: warning: use of uninitialized value 'src_mode' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
       Used here in copy_internal:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
  dst_mode_bits = (x->set_mode ? x->mode : src_mode) & CHMOD_MODE_BITS;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       Set here:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
  if (rename_errno == 0
      ? !x->last_file
      : rename_errno != EEXIST || x->interactive != I_ALWAYS_NO)
    {
      [...snip...]
      src_mode = src_sb.st_mode;
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Unclear, though it is marked with:
VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
  mode_t src_mode IF_LINT ( = 0);
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    TODO: src/copy.c:2616:9: warning: use of uninitialized value 'src_mode' [CWE-457] [-Wanalyzer-use-of-uninitialized-value]
